name: Code tests & eval

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-vital:
    name: Lint vitals
    strategy:
      fail-fast: false
      matrix:
        flavor: [ Foss,Gplay ]
        variant: [ Beta,Release ]
        module: [ app ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      - name: Setup project and build environment
        uses: ./.github/actions/common-setup

      - name: Check for fatal lint issues
        run: ./gradlew lintVital${{ matrix.flavor }}${{ matrix.variant }}

  build-modules:
    name: Build apps
    strategy:
      fail-fast: false
      matrix:
        flavor: [ Foss,Gplay ]
        variant: [ Debug ]
        module: [ app ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      - name: Setup project and build environment
        uses: ./.github/actions/common-setup

      - name: Build modules
        run: ./gradlew ${{ matrix.module }}:assemble${{ matrix.flavor }}${{ matrix.variant }}

  test-modules:
    name: Unit tests
    strategy:
      fail-fast: false
      matrix:
        variant: [ Debug,Beta,Release ]
        flavor: [ testFoss,testGplay ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      - name: Setup project and build environment
        uses: ./.github/actions/common-setup

      - name: Test modules
        run: ./gradlew ${{ matrix.flavor }}${{ matrix.variant }}UnitTest

      - name: Upload test results  
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.flavor }}-${{ matrix.variant }}
          path: |
            **/build/test-results/**/*.xml
            **/build/reports/tests/**/*
          retention-days: 5

  test-summary:
    name: Test Summary
    runs-on: ubuntu-22.04
    needs: test-modules
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          pattern: test-results-*
          merge-multiple: true

      - name: Generate test summary
        run: |
          echo "## üìä Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          total_tests=0
          total_passed=0
          total_failed=0
          total_skipped=0
          
          echo "| Module | Tests | Passed | Failed | Skipped | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|--------|--------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Process each XML file to extract test statistics
          for xml_file in $(find test-results -name "TEST-*.xml" 2>/dev/null | head -20); do
            if [ -f "$xml_file" ]; then
              # Extract test statistics from XML
              tests=$(grep -oP 'tests="\K[^"]*' "$xml_file" | head -1 || echo "0")
              failures=$(grep -oP 'failures="\K[^"]*' "$xml_file" | head -1 || echo "0")
              skipped=$(grep -oP 'skipped="\K[^"]*' "$xml_file" | head -1 || echo "0")
              time=$(grep -oP 'time="\K[^"]*' "$xml_file" | head -1 || echo "0")
              
              # Calculate passed tests
              passed=$((tests - failures - skipped))
              
              # Extract module name from file path
              module=$(echo "$xml_file" | sed 's/.*TEST-\(.*\)\.xml/\1/' | sed 's/.*\///')
              
              if [ "$tests" -gt 0 ]; then
                echo "| $module | $tests | $passed | $failures | $skipped | ${time}s |" >> $GITHUB_STEP_SUMMARY
                total_tests=$((total_tests + tests))
                total_passed=$((total_passed + passed))
                total_failed=$((total_failed + failures))
                total_skipped=$((total_skipped + skipped))
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: $total_tests" >> $GITHUB_STEP_SUMMARY
          echo "- **‚úÖ Passed**: $total_passed" >> $GITHUB_STEP_SUMMARY
          echo "- **‚ùå Failed**: $total_failed" >> $GITHUB_STEP_SUMMARY
          echo "- **‚è≠Ô∏è Skipped**: $total_skipped" >> $GITHUB_STEP_SUMMARY
          
          if [ "$total_tests" -gt 0 ]; then
            success_rate=$((total_passed * 100 / total_tests))
            echo "- **üìà Success Rate**: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$total_failed" -eq 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Some tests failed. Please check the individual job logs.**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check test results
        run: |
          # Count XML files to ensure we found test results
          xml_count=$(find test-results -name "TEST-*.xml" 2>/dev/null | wc -l)
          echo "Found $xml_count test result files"
          
          if [ "$xml_count" -eq 0 ]; then
            echo "‚ö†Ô∏è No test result files found. Tests may not have been executed properly."
            exit 1
          fi